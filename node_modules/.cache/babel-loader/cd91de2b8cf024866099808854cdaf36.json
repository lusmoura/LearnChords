{"ast":null,"code":"var _jsxFileName = \"/mnt/sda1/Documents/Personal_projects/chords/giter/src/AppImg.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Timer from './Timer';\nimport c1 from './imgs/c1.png';\nimport d1 from './imgs/d1.png';\nimport e1 from './imgs/e1.png';\nimport f1 from './imgs/f1.png';\nimport g1 from './imgs/g1.png';\nimport a1 from './imgs/a1.png';\nimport b1 from './imgs/b1.png';\nimport c2 from './imgs/c2.png';\nimport d2 from './imgs/d2.png';\nimport e2 from './imgs/e2.png';\nimport f2 from './imgs/f2.png';\nimport g2 from './imgs/g2.png';\nimport a2 from './imgs/a2.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chords = [c1, d1, e1, f1, g1, a1, b1, c2, d2, e2, f2, g2, a2];\nconst chords_names = ['c1', 'd1', 'e1', 'f1', 'g1', 'a1', 'b1', 'c2', 'd2', 'e2', 'f2', 'g2', 'a2'];\n\nfunction generateQuestion() {\n  var curr_chord_pos = Math.floor(Math.random() * chords.length);\n  const qtext = chords[curr_chord_pos];\n  const helper = chords.slice();\n  const random_answers = helper.sort(() => Math.random() - Math.random()).slice(0, 4);\n  const answer_pos = Math.floor(Math.random() * 4);\n\n  if (!random_answers.includes(chords[curr_chord_pos])) {\n    random_answers[answer_pos] = chords[curr_chord_pos];\n  }\n\n  const answerOptions = random_answers.map(x => {\n    const index = chords.indexOf(x);\n    console.log(x, index);\n    return {\n      'answerText': chords_names[index],\n      'isCorrect': x === chords[curr_chord_pos]\n    };\n  });\n  console.log(random_answers);\n  console.log(chords[curr_chord_pos]);\n  console.log(answerOptions);\n  const question = {\n    questionText: qtext,\n    answerOptions: answerOptions\n  };\n  return question;\n}\n\nfunction getTime(streak) {\n  return Math.max(Math.floor(-6 / 25 * streak + 20), 2);\n}\n\nexport default function AppImg() {\n  _s();\n\n  const question = generateQuestion();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [lastRight, setLastRight] = useState(null);\n  const [started, setStarted] = useState(false);\n\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n      setStreak(streak + 1);\n      setLastRight(true);\n    } else {\n      setStreak(0);\n      setLastRight(false);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion);\n  };\n\n  if (started) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-title\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Qual a nota?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: question.questionText,\n            alt: \"question image\",\n            className: \"question-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-data feedback\",\n          children: lastRight == undefined ? 'Vamo que vamo' : lastRight ? 'Certo!' : 'Errado =('\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-data\",\n          children: [\"Streak \", streak]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-data\",\n          children: [\"Certas \", score, \" / \", currentQuestion]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: question.answerOptions.map(answerOption => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n          children: answerOption.answerText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      time: getTime(streak),\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppImg, \"PJATu5B6cN4HAof2fjBegAq4k8A=\");\n\n_c = AppImg;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppImg\");","map":{"version":3,"sources":["/mnt/sda1/Documents/Personal_projects/chords/giter/src/AppImg.js"],"names":["React","useState","Timer","c1","d1","e1","f1","g1","a1","b1","c2","d2","e2","f2","g2","a2","chords","chords_names","generateQuestion","curr_chord_pos","Math","floor","random","length","qtext","helper","slice","random_answers","sort","answer_pos","includes","answerOptions","map","x","index","indexOf","console","log","question","questionText","getTime","streak","max","AppImg","currentQuestion","setCurrentQuestion","score","setScore","setStreak","lastRight","setLastRight","started","setStarted","handleAnswerOptionClick","isCorrect","nextQuestion","undefined","answerOption","answerText"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Timer from './Timer';\nimport c1 from './imgs/c1.png'\nimport d1 from './imgs/d1.png'\nimport e1 from './imgs/e1.png'\nimport f1 from './imgs/f1.png'\nimport g1 from './imgs/g1.png'\nimport a1 from './imgs/a1.png'\nimport b1 from './imgs/b1.png'\nimport c2 from './imgs/c2.png'\nimport d2 from './imgs/d2.png'\nimport e2 from './imgs/e2.png'\nimport f2 from './imgs/f2.png'\nimport g2 from './imgs/g2.png'\nimport a2 from './imgs/a2.png'\n\nconst chords = [c1, d1, e1, f1, g1, a1, b1, c2, d2, e2, f2, g2, a2,];\nconst chords_names = ['c1', 'd1', 'e1', 'f1', 'g1', 'a1', 'b1', 'c2', 'd2', 'e2', 'f2', 'g2', 'a2',];\n\nfunction generateQuestion() {\n  var curr_chord_pos = Math.floor(Math.random() * chords.length);\n  \n  const qtext = chords[curr_chord_pos];\n  \n  const helper = chords.slice();\n  const random_answers = helper.sort(() => Math.random() - Math.random()).slice(0, 4);\n  const answer_pos = Math.floor(Math.random() * 4);\n  \n  if (!(random_answers.includes(chords[curr_chord_pos]))) {\n    random_answers[answer_pos] = chords[curr_chord_pos];\n  }\n\n  const answerOptions = random_answers.map(x => {\n    const index = chords.indexOf(x);\n    console.log(x, index)\n    return {'answerText': chords_names[index], 'isCorrect': (x === chords[curr_chord_pos])}\n  });\n\n  console.log(random_answers);\n  console.log(chords[curr_chord_pos]);\n  console.log(answerOptions);\n\n  const question = {\n      questionText: qtext,\n      answerOptions: answerOptions\n    }\n    \n  return question;\n}\n\nfunction getTime(streak) {\n  return Math.max(Math.floor(-6/25*streak + 20), 2);\n}\n\nexport default function AppImg() {\n  const question = generateQuestion();\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [score, setScore] = useState(0);\n\tconst [streak, setStreak] = useState(0);\n\tconst [lastRight, setLastRight] = useState(null);\n\tconst [started, setStarted] = useState(false);\n\n\tconst handleAnswerOptionClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t\tsetStreak(streak + 1);\n\t\t\tsetLastRight(true);\n\t\t} else {\n      setStreak(0);\n      setLastRight(false);\n    }\n    \n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion);\n  }\n\n  if (started) {\n    \n  }\n  \n\treturn (\n    <div className='wrapper'>\n      <div className='app'>\n          <div className='question-section'>\n            <div className='question-title'>\n              <span>Qual a nota?</span>\n              <br></br>\n              <img src={question.questionText} alt='question image' className='question-image'/>\n            </div>\n            <div className='score-data feedback'>{lastRight==undefined?'Vamo que vamo' : lastRight ? 'Certo!':'Errado =('}</div>\n            <div className='score-data'>Streak {streak}</div>\n            <div className='score-data'>Certas {score} / {currentQuestion}</div>\n          </div>\n          <div className='answer-section'>\n            {question.answerOptions.map((answerOption) => (\n              <button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n              ))}\n          </div>\n      </div>\n      <Timer time={getTime(streak)} question={currentQuestion}/>\n\t</div>\n\t);\n}"]},"metadata":{},"sourceType":"module"}